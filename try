#include <stdint.h>
#include <stdio.h>

//------------------ Enum for Bitmaps ------------------//
typedef enum {
    IMAGE_LOGO,
    IMAGE_ICON1,
    IMAGE_ICON2,
    IMAGE_COUNT
} BitmapEnum_t;

//------------------ 2D Image Arrays ------------------//
const uint8_t image_logo[2][2] = {
    {0xFF, 0x00},
    {0x00, 0xFF}
};

const uint8_t image_icon1[3][3] = {
    {0x11, 0x22, 0x33},
    {0x44, 0x55, 0x66},
    {0x77, 0x88, 0x99}
};

const uint8_t image_icon2[2][3] = {
    {0xAA, 0xBB, 0xCC},
    {0xDD, 0xEE, 0xFF}
};

//------------------ Image Metadata ------------------//
typedef struct {
    const uint8_t (*data)[];
    uint16_t width;
    uint16_t height;
} Bitmap2D_t;

// Use `void *` cast to handle pointer-to-2D-array of unknown width
const Bitmap2D_t gBitmaps[IMAGE_COUNT] = {
    [IMAGE_LOGO] = { (const uint8_t(*)[])image_logo, 2, 2 },
    [IMAGE_ICON1] = { (const uint8_t(*)[])image_icon1, 3, 3 },
    [IMAGE_ICON2] = { (const uint8_t(*)[])image_icon2, 3, 2 }
};

//------------------ Draw Function ------------------//
void DrawBitmap2D(uint16_t x, uint16_t y, BitmapEnum_t id) {
    if (id >= IMAGE_COUNT) {
        printf("Invalid image ID\n");
        return;
    }

    const Bitmap2D_t *bmp = &gBitmaps[id];
    printf("Drawing image at X: %d Y: %d, W: %d H: %d\n", x, y, bmp->width, bmp->height);

    for (uint16_t row = 0; row < bmp->height; row++) {
        for (uint16_t col = 0; col < bmp->width; col++) {
            uint8_t pixel = bmp->data[row][col];
            printf("%02X ", pixel);  // Simulated pixel output
        }
        printf("\n");
    }
}

//------------------ Main Example ------------------//
int main(void) {
    DrawBitmap2D(10, 20, IMAGE_LOGO);
    printf("\n");
    DrawBitmap2D(30, 40, IMAGE_ICON1);
    return 0;
}