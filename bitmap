#include <stdint.h>
#include "glcd.h"   // GLCD low-level functions

#define GLCD_WIDTH        240
#define GLCD_HEIGHT       64
#define GLCD_PAGES        (GLCD_HEIGHT / 8)   // 64/8 = 8 pages
#define BYTES_PER_ROW     GLCD_WIDTH

// ------------------------------------------------------
// Print an image (bitmap) on GLCD
// dat1[][] should be organized as [pages][width]
// Example for 240x64: dat1[8][240]
// ------------------------------------------------------
void GLCD_printImage(uint8_t pages, uint8_t width,
                     const uint8_t dat1[pages][width],
                     uint8_t horizontal_pos,
                     uint8_t vertical_pos)
{
    for (uint8_t page = 0; page < pages; page++)
    {
        // Set start address for this row
        uint16_t addr = G_BASE + ((vertical_pos + page) * BYTES_PER_ROW) + horizontal_pos;
        GLCD_setAddressByte(addr);

        uint32_t image = 0;
        uint16_t written = 0;

        for (uint8_t col = 0; col < width; col++)
        {
            // Pack 4 pixels into 32-bit buffer
            image = (image << 6) | dat1[page][col];

            if ((col & 0x03) == 3)   // every 4 columns
            {
                // Output 3 bytes (24 bits)
                GLCD_DataWrite((image >> 16) & 0xFF);
                GLCD_CommandWrite(0xC0);

                GLCD_DataWrite((image >> 8) & 0xFF);
                GLCD_CommandWrite(0xC0);

                GLCD_DataWrite(image & 0xFF);
                GLCD_CommandWrite(0xC0);

                written += 3;
                image = 0;
            }
        }

        // Pad remaining row if needed
        while (written < BYTES_PER_ROW)
        {
            GLCD_CommandWrite(0xC1);   // move to next address
            written++;
        }
    }

    GLCD_CommandWrite(0xC0);  // finalize
}